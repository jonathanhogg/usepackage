changequote([[,]])
usepackage
==========
by Jonathan AH Hogg (jonathan@dcs.gla.ac.uk)

usepackage is an environment management program. It is based on the principle
of "packages" that are "used". When a package is used, the information
necessary to invoke it is drawn into the environment of the shell.


Using usepackage:
-----------------

Add one of the following lines to your shell rc file.

 * for csh/tcsh:	source INSTALL_DIR/lib/usepackage/use.csh
 * for sh/zsh/bash:	source INSTALL_DIR/lib/usepackage/use.bsh
 * for ksh:		. INSTALL_DIR/lib/usepackage/use.ksh

 * if you use zsh on the Pentiums or on Solaris machines and suffer horrible
   core dumps, then you might like to try using this line instead:

   source INSTALL_DIR/lib/usepackage/use.zsh

Then invoke `use' to add packages to your environment like:

   use <package1> [<package2>...]

For example, in the shell rc file:

   use gnu standard X11

Note that usepackage is case-insensitive, so `x11' is also acceptable in the 
above example.

The 'use' command can be called at any time to use another package, for
example:

   > latex foo
   latex: Command not found.
   > use tex
   > latex foo
   This is TeX, Version 3.1415 (C version 6.1)
   ...

If the requested package is not available for your platform then a warning
message will be given of the form:

   > use java
   usepackage: no match for package `java' on this host.

These messages can be suppressed with the `-s' flag (for instance if you log 
onto platforms for which certain packages that you use are not available):

   > use -s java


A Recommendation:
-----------------

As usepackage makes it very easy to add packages into your environment at the 
command line, it is worth not adding all the packages you might ever need in 
your shell rc file. Instead add only the packages you commonly use and add 
rarer ones before you run them. For example, if you rarely use latex it makes 
no sense to keep it resident in your path, following the example above it is 
simple to bring it in before you use it. This will keep your path short and 
speed-up shell startup times. In particular, some brain-dead shells have 
major problems with a very long path. Another advantage of doing this is
that the `man' command works much better with a short MANPATH variable and
even better if the pages you request are near the head of the MANPATH (which
is the case when a package is added at the command line).


Customising packages:
---------------------

The file 'INSTALL_DIR/lib/usepackage/packages.master' contains
the information about each package. This file contains comments explaining 
its [[format]]. Custom packages can be added by creating the file '.packages' 
in your home directory with the same [[format]] as the main packages file.

If you need to add a package which you feel should be available more widely,
then please email me and i'll include it into the main packages file.


